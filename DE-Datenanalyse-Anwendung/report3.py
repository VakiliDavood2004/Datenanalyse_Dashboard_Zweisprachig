# report3.py
"""
Diese Funktion ruft Verkaufsdaten aus der Datenbank sales.db ab und erm√∂glicht eine zeitliche Analyse, indem 
Transaktionsdaten in das Datumsformat konvertiert werden. Zeilen ohne g√ºltiges Datum werden zun√§chst entfernt. 
Anschlie√üend werden Einkaufs- und Verkaufsdaten t√§glich und monatlich gruppiert und aggregiert. Der umsatzst√§rkste 
Tag wird ermittelt, und es werden Berichte zu monatlichen Verkaufstrends sowie zur Produktleistung pro Monat erstellt. 
Abschlie√üend wird ein Textbericht generiert, der den umsatzst√§rksten Tag, die monatlichen Trends und die Produktleistung 
f√ºr jeden Monat enth√§lt. Im Falle eines Fehlers wird eine entsprechende Warnmeldung zur√ºckgegeben.

"""


import sqlite3
import pandas as pd
import numpy as np

def generate_time_analysis():
    try:
        conn = sqlite3.connect("sales.db")
        df = pd.read_sql_query("SELECT * FROM sales", conn)
        conn.close()

        # Datumsspalte in das Datumsformat konvertieren
        df["transaction_date"] = pd.to_datetime(df["transaction_date"], errors='coerce')

        # Zeilen mit ung√ºltigen oder fehlenden Datumsangaben entfernen
        df = df.dropna(subset=["transaction_date"])

        # T√§gliche und monatliche Gruppierung
        daily_summary = df.groupby(df["transaction_date"].dt.date).agg({
            "total_sale": "sum",
            "total_purchase": "sum"
        })

        monthly_summary = df.groupby(df["transaction_date"].dt.to_period("M")).agg({
            "total_sale": "sum",
            "total_purchase": "sum"
        }).sort_index()

        # Umsatzst√§rkster Tag
        peak_day = daily_summary["total_sale"].idxmax()
        peak_day_value = daily_summary["total_sale"].max()

        # Monatlicher Verkaufstrend
        trend_lines = ["üìÜ Monatlicher Verkaufstrend:"]
        for period, row in monthly_summary.iterrows():
            trend_lines.append(
                f"  ‚Ä¢ {period}: Verk√§ufe {row['total_sale']:,.0f} Einkauf / Euro {row['total_purchase']:,.0f} Euro"
            )

        # Produktverk√§ufe im Zeitverlauf
        product_trend = df.groupby(["product_name", df["transaction_date"].dt.to_period("M")])["quantity_sold"].sum()
        product_lines = ["üì¶ Monatlicher Verkaufs¬≠trend nach Produkt:"]
        product_trend = product_trend.sort_index()
        for (name, period), qty in product_trend.items():
            product_lines.append(f"  ‚Ä¢ {name} in {period}: {qty} Einheiten")

        # Berichtszusammenfassung
        report = [
            f"‚è≥ Spitzenverkaufstag: {peak_day} Mit Betrag {peak_day_value:,.0f} Euro",
            "",
        ] + trend_lines + [""] + product_lines

        return "\n".join(report)

    except Exception as e:
        return f"‚ö†Ô∏è Fehler bei der zeitlichen Verkaufsanalyse: {e}"