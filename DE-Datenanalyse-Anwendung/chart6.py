# chart6.py
"""
Dieser Code extrahiert Verkaufsdaten aus der Datenbank sales.db und berechnet die Gesamtanzahl der verkauften Einheiten 
f√ºr jedes Produkt. Anschlie√üend wird ein Balkendiagramm erstellt, das die Produkte nach Verkaufsmenge ‚Äì von am wenigsten 
bis am meisten verkauft ‚Äì sortiert darstellt. Die Balken sind in der Farbe ‚Äûmediumseagreen‚Äú eingef√§rbt.Die erste Funktion 
zeigt das Diagramm zur visuellen Pr√ºfung in einem separaten Fenster an, w√§hrend die zweite Funktion dasselbe Diagramm als 
Pixmap-Bild f√ºr die grafische Benutzeroberfl√§che oder das Dashboard generiert. √úber jedem Balken wird die Verkaufsanzahl 
als Zahlenwert angezeigt.

"""


import sqlite3
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from PyQt5.QtGui import QPixmap
# üì¶ Erstellung eines Balkendiagramms der meist- und am wenigsten verkauften Produkte
def draw_sales_bar_chart():
    try:
        with sqlite3.connect("sales.db") as conn:
            df = pd.read_sql_query("SELECT product_name, quantity_sold FROM sales", conn)

        product_sales = df.groupby("product_name")["quantity_sold"].sum().sort_values()

        plt.figure(figsize=(10, 6))
        bars = plt.bar(product_sales.index, product_sales.values, color="mediumseagreen")
        plt.title("üì¶ Produktverk√§ufe (von niedrig bis hoch)", fontsize=14)
        plt.xlabel("Produktname")
        plt.ylabel("Verkaufte Einheiten")
        plt.xticks(rotation=45, ha="right")
        plt.grid(axis="y", linestyle="--", alpha=0.3)

        for bar, value in zip(bars, product_sales.values):
            plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height(),
                     str(int(value)), ha="center", va="bottom", fontsize=9)

        plt.tight_layout()
        plt.show()

    except Exception as e:
        print(f"‚ö†Ô∏è Fehler beim Zeichnen des Produktverkaufsdiagramms: {e}")
